For accomplishment of the workshop 4 the new essential contept of Object Orienter Programming related to "Classes" was covered. This time, we were introducted with the members of the class called "Constructors" and "Destructors". What they are? In C++, "Constructors" are the special member functions that used to initialize the private objects of the class to the safe empty state. There are few rules about constructors. First of all, they must have the same name as the class itself. Secondly, they do not have a return type (even void). Thirdly, there is no need to call constructors in regular functions since they will automatically perform their task. All they need, just a proper implementation in the source file with prototype included in header (inside of class). There are also three types of constructors: default, overloading and copy. Default one is the most basic which takes no parameters. It is possible to not create it due to the fact that compiler will create a default one by itself and initialize the values to default (if they have it). However, if we want to create an overloding constructor (the one that can take one or several parameters and allows to initialize the objects with provided values), we have to specify our default one because the compiler will not create it in case if we create a overloading one first. The same situation with the copy constructor (the one that takes the reference to an object of the class and create an object by copying another object of the same class). Destructors are the special member function with the same syntax as the default constructor, but with the tilde sign (~) at beginning. Its purpose is to automatically release or delete the memory of dynamically allocated objects of the class.

There were no issues faced during the completion process of the both parts of the workshop. Just one challenging part was in the DIY portion related to printing the label. Fortunately, the similar workshop was completed in IPC144 and by refering to that, i was able to succesfully complete the function. 