For accomplishment of the second workshop new essential concept was covered. For this time, we got introduced with the topic called "dynamic memory allocation". What does it mean? In C++ language, arrays are static by default. It means, their size is constant (given during compilation period) and cannot be changed during the runtime. This issue creates a border for us, when we do not know how much data will be stored in array. "Dynamic memory allocation" helps us to overcome this border by giving us more flexibility in terms of giving desired size for arrays. However, despite the advantages, "dynamic memory allocation"can be quite dangerous in case of improper use. When we terminate our program that contain a dynamic array, all the memory allocated for the objects get deleted exept dynamic one which remains in memory. This leads to the memory leaks which can be extremely harmful for our machine. For that reason, we always have to deallocate the memory for dynamic objects at the end of our program.

There were no serious issues during the completion of the workshop. Only a minor issue was identified in the first part of the workshop. In the first load function initially the arguments for read functions were passed not in the order which instructions required. Fortunately, after spending some time, the issue was succesfully solved. Moreover, while identifying it, the program was tested couple of times with simple different methods. <iomanip> library was included at the testing time and accidentally forgotten to be removed after solving the problem.